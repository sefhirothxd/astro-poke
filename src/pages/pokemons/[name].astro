---
import type { GetStaticPaths } from 'astro';
import type { PokemonListResponse } from '../../interfaces/pokemon-list.response';
import Title from '@components/shared/Title.astro';
import MainLayout from '../../layouts/MainLayout.astro';
import PokemonCard from '../../components/pokemons/PokemonCard.astro';
import { Icon } from 'astro-icon/components';

export const getStaticPaths = (async () => {
	const res = await fetch('https://pokeapi.co/api/v2/pokemon?limit=151');
	const { results } = (await res.json()) as PokemonListResponse;
	return results.map(({ name, url }) => ({ params: { name }, props: { url } }));
}) satisfies GetStaticPaths;

const { name } = Astro.params;
const { url } = Astro.props;
const id = url.split('/').at(-2);
const audioSrc = `https://raw.githubusercontent.com/PokeAPI/cries/main/cries/pokemon/latest/${id}.ogg`;
const imageSrc = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${id}.png`;
---

<MainLayout
	title={`Pokemon - #${id} ${name}`}
	description={`Informacion sobre el pokemon ${name}`}
	image={`${imageSrc}`}
>
	<section class="mt-10 mx-10 flex flex-col justify-center items-center">
		<div class="flex justify-center flex-col items-center">
			<div class="flex">
				<div>
					<button onclick="history.back()" class="text-blue-500"
						>Regresar</button
					>
					<Title>{name}</Title>
				</div>
				<button id="btn-favorite" class="ml-4" data-name={name} data-id={id}>
					<Icon data-outline name="hear-outline" size={50} />
					<Icon data-full class={'hidden'} name="hear-full" size={50} />
				</button>
			</div>

			<PokemonCard name={name} {url} isBig />
			<audio controls class="mt-5">
				<source src={audioSrc} type="audio/ogg" />
				Your browser does not suport the audio element.
			</audio>
		</div>
	</section>
</MainLayout>
<script>
	interface FavoritePokemon {
		name: string;
		id: number;
	}

	const handlePageLoad = () => {
		let favoritePokemon: FavoritePokemon[] = JSON.parse(
			localStorage.getItem('favorite') ?? '[]'
		);

		// seleccionamos el boton favorite para obtener los datos
		const btnFavorite = document.querySelector(
			'#btn-favorite'
		) as HTMLButtonElement;

		if (!btnFavorite) return;
		// se obtiene la informacion de los propiedades del boton, dado que la inforacion se esta obteniendo de lado del server en astro
		const name = btnFavorite.dataset.name ?? '';
		const id = btnFavorite.dataset.id ?? '';

		const hearOutline = btnFavorite.querySelector(
			'[data-outline]'
		) as HTMLElement;
		const hearFull = btnFavorite.querySelector('[data-full]') as HTMLElement;

		// funcion para ocultar o mostrar el corazon

		const existPokemon = () => {
			const exist = favoritePokemon.some((fav) => fav.name === name);
			if (exist) {
				hearOutline.classList.toggle('hidden');
				hearFull.classList.toggle('hidden');
			}
		};

		//si el pokemon esta en lista de favorito se elimina sino se agrega
		const toggleFavorite = () => {
			const isFavorite = favoritePokemon.some((fav) => fav.name === name);
			if (isFavorite) {
				//remover
				favoritePokemon = favoritePokemon.filter((fav) => fav.name !== name);
			} else {
				//add
				favoritePokemon.push({
					id: +id,
					name: name,
				});
			}

			localStorage.setItem('favorite', JSON.stringify(favoritePokemon));
		};

		btnFavorite.addEventListener('click', () => {
			hearOutline.classList.toggle('hidden');
			hearFull.classList.toggle('hidden');
			toggleFavorite();
		});
		existPokemon();
	};

	// ciclo de vida del ViewTransition astro para que vuelva a funcionar el componente que obtiene la informacion de los pokemons
	document.addEventListener('astro:page-load', () => {
		handlePageLoad();
	});
</script>

<style>
	a {
		@apply hover:underline text-blue-500;
	}
	#btn-favorite {
		@apply hover:animate-pulse;
	}
</style>
